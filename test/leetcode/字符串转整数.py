"""
实现 atoi，将字符串转为整数。
该函数首先根据需要丢弃任意多的空格字符，直到找到第一个非空格字符为止。如果第一个非空字符是正号或负号，选取该符号，
并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的
数字字符组合起来，形成整数。
字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。
当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。
若函数不能执行有效的转换，返回 0。
说明：
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回 
INT_MAX (231 − 1) 或 INT_MIN (−231) 。
示例 1:
输入: "42"
输出: 42
示例 2:
输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:
输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:
输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:
输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。
"""
# 将输入的内容进行去空格
num = input().strip()
# 暂时存储某一段只包含一个正负号或者数字的值
temp = ""
# 记录正负号的个数
count = 0
# 标记是否已经执行过数字了
flag = False
# 循环取出里面的字符来判断
for i in range(num.__len__()):
    # 如果当前字符不是正号也不是负号也不是数字时则退出循环
    if num[i] != "-" and num[i] != "+" and not num[i].isdigit():
        break
    # 否则继续判断
    else:
        # 如果当前字符是正号或者负号时
        if num[i] == "-" or num[i] == "+":
            # 那就记录好已经有正号或负号了
            count += 1
            # 如果正号或者负号的数目已经超过一个并且还没记录过数字则退出循环
            if count > 1 or flag:
                break
            # 否则把当前字符叠加到暂存值里面
            else:
                temp += num[i]
        # 如果当前字符是数字则把当前字符叠加到暂存值里面
        elif num[i].isdigit():
            temp += num[i]
            # 并且记录好我暂存值已经有数字了
            flag = True
print(temp)
# 循环完之后得到的结果就是，最多包含一个正号或者负号并且他们在最前面，其他字符是数字，或者是空字符，或者全是数字

# 定义一个变量来存储最后的整数结果
result = 0
# 如果上面循环完得到的结果不是空字符时
if temp != "":
    # 再判断正号或者负号是否在temp里面
    if "+" in temp or "-" in temp:
        # 如果正号或负号是在最前面再判断长度是否大于1，保证内容不是一个正号或负号
        if temp.__len__() > 1:
            # 如果条件都是真则证明此值可以转换成int
            result = int(temp)
    # 剩下的只包含数字可以进行转换成int
    else:
        result = int(temp)
# 转换成整数的时候再来判断是否小于最小值
if result < -2**31:
    result = -2**31
# 判断是否大于最大值
if result > 2**31-1:
    result = 2**31-1
print(result)
